{"ast":null,"code":"const sendMessage = async () => {\n  if (input.trim() === \"\") return;\n  const userMessage = {\n    sender: \"user\",\n    text: input\n  };\n  setMessages(prevMessages => [...prevMessages, userMessage]);\n  setInput(\"\");\n  setIsTyping(true);\n\n  // Parse input for dietary preferences or allergies\n  let query = input.toLowerCase();\n  let diet = null;\n  let allergy = null;\n  let calories = null;\n  if (query.includes(\"diet\")) {\n    const match = query.match(/diet (.+)/);\n    diet = match ? match[1].trim() : null;\n  }\n  if (query.includes(\"allergy to\")) {\n    const match = query.match(/allergy to (.+)/);\n    allergy = match ? match[1].trim() : null;\n  }\n  if (query.includes(\"calories\")) {\n    const match = query.match(/calories (\\d+)-(\\d+)/);\n    calories = match ? `${match[1]}-${match[2]}` : null;\n  }\n  setIsLoading(true);\n  try {\n    const params = new URLSearchParams({\n      q: input,\n      app_id: API_ID,\n      app_key: API_KEY,\n      from: 0,\n      to: 3\n    });\n    if (diet) params.append(\"diet\", diet);\n    if (allergy) params.append(\"health\", `allergy-${allergy}`);\n    if (calories) params.append(\"calories\", calories);\n    const response = await axios.get(`https://api.edamam.com/search?${params.toString()}`);\n    setIsTyping(false);\n    setIsLoading(false);\n    const foundRecipes = response.data.hits.map(hit => ({\n      label: hit.recipe.label,\n      ingredientLines: hit.recipe.ingredientLines,\n      calories: hit.recipe.calories,\n      healthLabels: hit.recipe.healthLabels\n    }));\n    if (foundRecipes.length === 0) {\n      setMessages(prevMessages => [...prevMessages, {\n        sender: \"bot\",\n        text: \"Sorry, no recipes match your query. Try refining your search!\"\n      }]);\n      return;\n    }\n    setRecipes(foundRecipes);\n    const recipesList = foundRecipes.map(recipe => recipe.label).join(\", \");\n    const botMessage = {\n      sender: \"bot\",\n      text: `Here are some recipes matching your preferences: ${recipesList}. You can ask for details with \"Recipe for [recipe name]\".`\n    };\n    setMessages(prevMessages => [...prevMessages, botMessage]);\n  } catch (error) {\n    console.error(\"Error fetching recipes:\", error);\n    setIsTyping(false);\n    setIsLoading(false);\n    setMessages(prevMessages => [...prevMessages, {\n      sender: \"bot\",\n      text: \"Oops! Something went wrong. Please try again.\"\n    }]);\n  }\n};","map":{"version":3,"names":["sendMessage","input","trim","userMessage","sender","text","setMessages","prevMessages","setInput","setIsTyping","query","toLowerCase","diet","allergy","calories","includes","match","setIsLoading","params","URLSearchParams","q","app_id","API_ID","app_key","API_KEY","from","to","append","response","axios","get","toString","foundRecipes","data","hits","map","hit","label","recipe","ingredientLines","healthLabels","length","setRecipes","recipesList","join","botMessage","error","console"],"sources":["C:/Users/abdal/Desktop/rojet sems belha9/src/chatbot.jsx"],"sourcesContent":["const sendMessage = async () => {\r\n  if (input.trim() === \"\") return;\r\n\r\n  const userMessage = { sender: \"user\", text: input };\r\n  setMessages((prevMessages) => [...prevMessages, userMessage]);\r\n  setInput(\"\");\r\n  setIsTyping(true);\r\n\r\n  // Parse input for dietary preferences or allergies\r\n  let query = input.toLowerCase();\r\n  let diet = null;\r\n  let allergy = null;\r\n  let calories = null;\r\n\r\n  if (query.includes(\"diet\")) {\r\n    const match = query.match(/diet (.+)/);\r\n    diet = match ? match[1].trim() : null;\r\n  }\r\n  if (query.includes(\"allergy to\")) {\r\n    const match = query.match(/allergy to (.+)/);\r\n    allergy = match ? match[1].trim() : null;\r\n  }\r\n  if (query.includes(\"calories\")) {\r\n    const match = query.match(/calories (\\d+)-(\\d+)/);\r\n    calories = match ? `${match[1]}-${match[2]}` : null;\r\n  }\r\n\r\n  setIsLoading(true);\r\n\r\n  try {\r\n    const params = new URLSearchParams({\r\n      q: input,\r\n      app_id: API_ID,\r\n      app_key: API_KEY,\r\n      from: 0,\r\n      to: 3,\r\n    });\r\n\r\n    if (diet) params.append(\"diet\", diet);\r\n    if (allergy) params.append(\"health\", `allergy-${allergy}`);\r\n    if (calories) params.append(\"calories\", calories);\r\n\r\n    const response = await axios.get(`https://api.edamam.com/search?${params.toString()}`);\r\n\r\n    setIsTyping(false);\r\n    setIsLoading(false);\r\n\r\n    const foundRecipes = response.data.hits.map((hit) => ({\r\n      label: hit.recipe.label,\r\n      ingredientLines: hit.recipe.ingredientLines,\r\n      calories: hit.recipe.calories,\r\n      healthLabels: hit.recipe.healthLabels,\r\n    }));\r\n\r\n    if (foundRecipes.length === 0) {\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: \"bot\", text: \"Sorry, no recipes match your query. Try refining your search!\" },\r\n      ]);\r\n      return;\r\n    }\r\n\r\n    setRecipes(foundRecipes);\r\n\r\n    const recipesList = foundRecipes\r\n      .map((recipe) => recipe.label)\r\n      .join(\", \");\r\n\r\n    const botMessage = {\r\n      sender: \"bot\",\r\n      text: `Here are some recipes matching your preferences: ${recipesList}. You can ask for details with \"Recipe for [recipe name]\".`,\r\n    };\r\n\r\n    setMessages((prevMessages) => [...prevMessages, botMessage]);\r\n  } catch (error) {\r\n    console.error(\"Error fetching recipes:\", error);\r\n    setIsTyping(false);\r\n    setIsLoading(false);\r\n    setMessages((prevMessages) => [\r\n      ...prevMessages,\r\n      { sender: \"bot\", text: \"Oops! Something went wrong. Please try again.\" },\r\n    ]);\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}