{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abdal\\\\Desktop\\\\rojet sems belha9\\\\src\\\\chatbot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [isVisible, setIsVisible] = useState(false); // Controls chatbot visibility\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [recipes, setRecipes] = useState(JSON.parse(localStorage.getItem(\"recipes\")) || []);\n  const [isTyping, setIsTyping] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const chatWindowRef = useRef(null);\n  const API_ID = \"2924ba02\";\n  const API_KEY = \"5bddcb2069c125bfb9efe35124827718\"; // Edamam API Key\n\n  useEffect(() => {\n    localStorage.setItem(\"recipes\", JSON.stringify(recipes));\n  }, [recipes]);\n  const autoScroll = () => {\n    var _chatWindowRef$curren;\n    (_chatWindowRef$curren = chatWindowRef.current) === null || _chatWindowRef$curren === void 0 ? void 0 : _chatWindowRef$curren.scrollTo({\n      top: chatWindowRef.current.scrollHeight,\n      behavior: \"smooth\"\n    });\n  };\n  useEffect(() => {\n    autoScroll();\n  }, [messages]);\n  const toggleVisibility = () => {\n    setIsVisible(!isVisible);\n  };\n  const sendMessage = async () => {\n    if (input.trim() === \"\") return;\n    const userMessage = {\n      sender: \"user\",\n      text: input\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    setInput(\"\");\n    setIsTyping(true);\n\n    // Parse input for dietary preferences, allergies, or calorie range\n    let query = input.toLowerCase();\n    let diet = null;\n    let allergy = null;\n    let calories = null;\n    if (query.includes(\"diet\")) {\n      const match = query.match(/diet (.+)/);\n      diet = match ? match[1].trim() : null;\n    }\n    if (query.includes(\"allergy to\")) {\n      const match = query.match(/allergy to (.+)/);\n      allergy = match ? match[1].trim() : null;\n    }\n    if (query.includes(\"calories\")) {\n      const match = query.match(/calories (\\d+)-(\\d+)/);\n      calories = match ? `${match[1]}-${match[2]}` : null;\n    }\n    setIsLoading(true);\n    try {\n      const params = new URLSearchParams({\n        q: input,\n        app_id: API_ID,\n        app_key: API_KEY,\n        from: 0,\n        to: 3\n      });\n      if (diet) params.append(\"diet\", diet);\n      if (allergy) params.append(\"health\", `allergy-${allergy}`);\n      if (calories) params.append(\"calories\", calories);\n      const response = await axios.get(`https://api.edamam.com/search?${params.toString()}`);\n      setIsTyping(false);\n      setIsLoading(false);\n      const foundRecipes = response.data.hits.map(hit => ({\n        label: hit.recipe.label,\n        ingredientLines: hit.recipe.ingredientLines,\n        calories: hit.recipe.calories,\n        healthLabels: hit.recipe.healthLabels\n      }));\n      if (foundRecipes.length === 0) {\n        setMessages(prevMessages => [...prevMessages, {\n          sender: \"bot\",\n          text: \"Sorry, no recipes match your query. Try refining your search!\"\n        }]);\n        return;\n      }\n      setRecipes(foundRecipes);\n      const recipesList = foundRecipes.map(recipe => recipe.label).join(\", \");\n      const botMessage = {\n        sender: \"bot\",\n        text: `Here are some recipes matching your preferences: ${recipesList}. You can ask for details with \"Recipe for [recipe name]\".`\n      };\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n    } catch (error) {\n      console.error(\"Error fetching recipes:\", error);\n      setIsTyping(false);\n      setIsLoading(false);\n      setMessages(prevMessages => [...prevMessages, {\n        sender: \"bot\",\n        text: \"Oops! Something went wrong. Please try again.\"\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleVisibility,\n      style: {\n        position: \"fixed\",\n        bottom: \"20px\",\n        left: \"20px\",\n        backgroundColor: \"#0078d7\",\n        color: \"#fff\",\n        border: \"none\",\n        borderRadius: \"50%\",\n        width: \"50px\",\n        height: \"50px\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.2)\",\n        cursor: \"pointer\"\n      },\n      children: \"\\uD83D\\uDCAC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), isVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        bottom: \"80px\",\n        left: \"20px\",\n        width: \"350px\",\n        maxHeight: \"400px\",\n        borderRadius: \"10px\",\n        boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.2)\",\n        overflow: \"hidden\",\n        fontFamily: \"'Roboto', sans-serif\",\n        backgroundColor: \"#f9f9f9\",\n        display: \"flex\",\n        flexDirection: \"column\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          backgroundColor: \"#0078d7\",\n          padding: \"10px 20px\",\n          color: \"#fff\",\n          textAlign: \"center\",\n          fontWeight: \"bold\"\n        },\n        children: \"Recipe Chatbot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: chatWindowRef,\n        style: {\n          flex: 1,\n          overflowY: \"auto\",\n          padding: \"10px\",\n          backgroundColor: \"#fff\"\n        },\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: msg.sender === \"user\" ? \"right\" : \"left\",\n            margin: \"10px 0\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"inline-block\",\n              padding: \"10px\",\n              borderRadius: \"15px\",\n              backgroundColor: msg.sender === \"user\" ? \"#0078d7\" : \"#e0e0e0\",\n              color: msg.sender === \"user\" ? \"#fff\" : \"#000\"\n            },\n            children: msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 15\n        }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: \"left\",\n            margin: \"10px 0\",\n            fontStyle: \"italic\"\n          },\n          children: \"Chatbot is typing...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          alignItems: \"center\",\n          padding: \"10px\",\n          backgroundColor: \"#f1f1f1\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          style: {\n            flex: 1,\n            padding: \"10px\",\n            borderRadius: \"20px\",\n            border: \"1px solid #ccc\",\n            outline: \"none\"\n          },\n          placeholder: \"Type an ingredient, 'Diet [diet type]', 'Allergy to [allergy]', or 'Calories [min-max]'...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          style: {\n            backgroundColor: \"#0078d7\",\n            color: \"#fff\",\n            border: \"none\",\n            borderRadius: \"50%\",\n            width: \"40px\",\n            height: \"40px\",\n            marginLeft: \"10px\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            cursor: \"pointer\"\n          },\n          children: \"\\u27A4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"center\",\n          padding: \"10px\",\n          fontStyle: \"italic\"\n        },\n        children: \"Searching for recipes...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(Chatbot, \"Tj1YoEgNBv+26XwZiEEHVI6MF3c=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Chatbot","_s","isVisible","setIsVisible","messages","setMessages","input","setInput","recipes","setRecipes","JSON","parse","localStorage","getItem","isTyping","setIsTyping","isLoading","setIsLoading","chatWindowRef","API_ID","API_KEY","setItem","stringify","autoScroll","_chatWindowRef$curren","current","scrollTo","top","scrollHeight","behavior","toggleVisibility","sendMessage","trim","userMessage","sender","text","prevMessages","query","toLowerCase","diet","allergy","calories","includes","match","params","URLSearchParams","q","app_id","app_key","from","to","append","response","get","toString","foundRecipes","data","hits","map","hit","label","recipe","ingredientLines","healthLabels","length","recipesList","join","botMessage","error","console","children","onClick","style","position","bottom","left","backgroundColor","color","border","borderRadius","width","height","display","alignItems","justifyContent","boxShadow","cursor","fileName","_jsxFileName","lineNumber","columnNumber","maxHeight","overflow","fontFamily","flexDirection","padding","textAlign","fontWeight","ref","flex","overflowY","msg","index","margin","fontStyle","type","value","onChange","e","target","outline","placeholder","marginLeft","_c","$RefreshReg$"],"sources":["C:/Users/abdal/Desktop/rojet sems belha9/src/chatbot.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst Chatbot = () => {\r\n  const [isVisible, setIsVisible] = useState(false); // Controls chatbot visibility\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n  const [recipes, setRecipes] = useState(\r\n    JSON.parse(localStorage.getItem(\"recipes\")) || []\r\n  );\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const chatWindowRef = useRef(null);\r\n\r\n  const API_ID = \"2924ba02\";\r\n  const API_KEY = \"5bddcb2069c125bfb9efe35124827718\"; // Edamam API Key\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"recipes\", JSON.stringify(recipes));\r\n  }, [recipes]);\r\n\r\n  const autoScroll = () => {\r\n    chatWindowRef.current?.scrollTo({\r\n      top: chatWindowRef.current.scrollHeight,\r\n      behavior: \"smooth\",\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    autoScroll();\r\n  }, [messages]);\r\n\r\n  const toggleVisibility = () => {\r\n    setIsVisible(!isVisible);\r\n  };\r\n\r\n  const sendMessage = async () => {\r\n    if (input.trim() === \"\") return;\r\n\r\n    const userMessage = { sender: \"user\", text: input };\r\n    setMessages((prevMessages) => [...prevMessages, userMessage]);\r\n    setInput(\"\");\r\n    setIsTyping(true);\r\n\r\n    // Parse input for dietary preferences, allergies, or calorie range\r\n    let query = input.toLowerCase();\r\n    let diet = null;\r\n    let allergy = null;\r\n    let calories = null;\r\n\r\n    if (query.includes(\"diet\")) {\r\n      const match = query.match(/diet (.+)/);\r\n      diet = match ? match[1].trim() : null;\r\n    }\r\n    if (query.includes(\"allergy to\")) {\r\n      const match = query.match(/allergy to (.+)/);\r\n      allergy = match ? match[1].trim() : null;\r\n    }\r\n    if (query.includes(\"calories\")) {\r\n      const match = query.match(/calories (\\d+)-(\\d+)/);\r\n      calories = match ? `${match[1]}-${match[2]}` : null;\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const params = new URLSearchParams({\r\n        q: input,\r\n        app_id: API_ID,\r\n        app_key: API_KEY,\r\n        from: 0,\r\n        to: 3,\r\n      });\r\n\r\n      if (diet) params.append(\"diet\", diet);\r\n      if (allergy) params.append(\"health\", `allergy-${allergy}`);\r\n      if (calories) params.append(\"calories\", calories);\r\n\r\n      const response = await axios.get(`https://api.edamam.com/search?${params.toString()}`);\r\n\r\n      setIsTyping(false);\r\n      setIsLoading(false);\r\n\r\n      const foundRecipes = response.data.hits.map((hit) => ({\r\n        label: hit.recipe.label,\r\n        ingredientLines: hit.recipe.ingredientLines,\r\n        calories: hit.recipe.calories,\r\n        healthLabels: hit.recipe.healthLabels,\r\n      }));\r\n\r\n      if (foundRecipes.length === 0) {\r\n        setMessages((prevMessages) => [\r\n          ...prevMessages,\r\n          { sender: \"bot\", text: \"Sorry, no recipes match your query. Try refining your search!\" },\r\n        ]);\r\n        return;\r\n      }\r\n\r\n      setRecipes(foundRecipes);\r\n\r\n      const recipesList = foundRecipes\r\n        .map((recipe) => recipe.label)\r\n        .join(\", \");\r\n\r\n      const botMessage = {\r\n        sender: \"bot\",\r\n        text: `Here are some recipes matching your preferences: ${recipesList}. You can ask for details with \"Recipe for [recipe name]\".`,\r\n      };\r\n\r\n      setMessages((prevMessages) => [...prevMessages, botMessage]);\r\n    } catch (error) {\r\n      console.error(\"Error fetching recipes:\", error);\r\n      setIsTyping(false);\r\n      setIsLoading(false);\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: \"bot\", text: \"Oops! Something went wrong. Please try again.\" },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <button\r\n        onClick={toggleVisibility}\r\n        style={{\r\n          position: \"fixed\",\r\n          bottom: \"20px\",\r\n          left: \"20px\",\r\n          backgroundColor: \"#0078d7\",\r\n          color: \"#fff\",\r\n          border: \"none\",\r\n          borderRadius: \"50%\",\r\n          width: \"50px\",\r\n          height: \"50px\",\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n          boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.2)\",\r\n          cursor: \"pointer\",\r\n        }}\r\n      >\r\n        💬\r\n      </button>\r\n\r\n      {isVisible && (\r\n        <div\r\n          style={{\r\n            position: \"fixed\",\r\n            bottom: \"80px\",\r\n            left: \"20px\",\r\n            width: \"350px\",\r\n            maxHeight: \"400px\",\r\n            borderRadius: \"10px\",\r\n            boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.2)\",\r\n            overflow: \"hidden\",\r\n            fontFamily: \"'Roboto', sans-serif\",\r\n            backgroundColor: \"#f9f9f9\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              backgroundColor: \"#0078d7\",\r\n              padding: \"10px 20px\",\r\n              color: \"#fff\",\r\n              textAlign: \"center\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n          >\r\n            Recipe Chatbot\r\n          </div>\r\n          <div\r\n            ref={chatWindowRef}\r\n            style={{\r\n              flex: 1,\r\n              overflowY: \"auto\",\r\n              padding: \"10px\",\r\n              backgroundColor: \"#fff\",\r\n            }}\r\n          >\r\n            {messages.map((msg, index) => (\r\n              <div\r\n                key={index}\r\n                style={{\r\n                  textAlign: msg.sender === \"user\" ? \"right\" : \"left\",\r\n                  margin: \"10px 0\",\r\n                }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    display: \"inline-block\",\r\n                    padding: \"10px\",\r\n                    borderRadius: \"15px\",\r\n                    backgroundColor: msg.sender === \"user\" ? \"#0078d7\" : \"#e0e0e0\",\r\n                    color: msg.sender === \"user\" ? \"#fff\" : \"#000\",\r\n                  }}\r\n                >\r\n                  {msg.text}\r\n                </div>\r\n              </div>\r\n            ))}\r\n            {isTyping && (\r\n              <div style={{ textAlign: \"left\", margin: \"10px 0\", fontStyle: \"italic\" }}>\r\n                Chatbot is typing...\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              padding: \"10px\",\r\n              backgroundColor: \"#f1f1f1\",\r\n            }}\r\n          >\r\n            <input\r\n              type=\"text\"\r\n              value={input}\r\n              onChange={(e) => setInput(e.target.value)}\r\n              style={{\r\n                flex: 1,\r\n                padding: \"10px\",\r\n                borderRadius: \"20px\",\r\n                border: \"1px solid #ccc\",\r\n                outline: \"none\",\r\n              }}\r\n              placeholder=\"Type an ingredient, 'Diet [diet type]', 'Allergy to [allergy]', or 'Calories [min-max]'...\"\r\n            />\r\n            <button\r\n              onClick={sendMessage}\r\n              style={{\r\n                backgroundColor: \"#0078d7\",\r\n                color: \"#fff\",\r\n                border: \"none\",\r\n                borderRadius: \"50%\",\r\n                width: \"40px\",\r\n                height: \"40px\",\r\n                marginLeft: \"10px\",\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n                cursor: \"pointer\",\r\n              }}\r\n            >\r\n              ➤\r\n            </button>\r\n          </div>\r\n          {isLoading && (\r\n            <div style={{ textAlign: \"center\", padding: \"10px\", fontStyle: \"italic\" }}>\r\n              Searching for recipes...\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}